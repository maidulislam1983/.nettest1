# ASP.NET Core CI/CD Pipeline
# Build, test, and deploy ASP.NET Core application using publish profiles

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  dotnetVersion: '8.x'
  projectPath: 'WebApplication1/WebApplication1.csproj'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build job'
    steps:
    
    # Install .NET SDK
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '$(dotnetVersion)'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    # Restore dependencies
    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    # Build the application
    - task: DotNetCoreCLI@2
      displayName: 'Build application'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # Run tests (if any test projects exist)
    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*Test*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'
      continueOnError: true

    # Publish the application
    - task: DotNetCoreCLI@2
      displayName: 'Publish application'
      inputs:
        command: 'publish'
        projects: '$(projectPath)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish --no-build'
        publishWebProjects: true
        zipAfterPublish: true

    # Publish build artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployWeb
    displayName: 'Deploy to Web Server'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          
          # Download build artifacts
          - download: current
            artifact: drop
            displayName: 'Download build artifacts'

          # Install .NET SDK for deployment
          - task: UseDotNet@2
            displayName: 'Install .NET SDK for deployment'
            inputs:
              packageType: 'sdk'
              version: '$(dotnetVersion)'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          # # Deploy using Web Deploy (MSDeploy)
          # - task: IISWebAppDeploymentOnMachineGroup@0
          #   displayName: 'Deploy using Web Deploy'
          #   inputs:
          #     WebSiteName: 'saidul1983-001-site1'
          #     Package: '$(Pipeline.Workspace)/drop/publish/*.zip'
          #     RemoveAdditionalFilesFlag: true
          #     TakeAppOfflineFlag: true
          #     XmlTransformation: true
          #     XmlVariableSubstitution: true

          #Alternative: Deploy using publish profile (uncomment if Web Deploy task doesn't work)
          - task: DotNetCoreCLI@2
            displayName: 'Deploy using publish profile'
            inputs:
              command: 'custom'
              custom: 'publish'
              arguments: '$(projectPath) /p:PublishProfile="saidul1983-001-site1 - Web Deploy" /p:Password="$(DeployPassword)" /p:UserName="$(DeployUsername)"'
